
  version: 2
  jobs:
    build:
      docker:
        # specify the version you desire here
        - image: circleci/openjdk:11-jdk
      working_directory: /tmp/workspace
      steps:
        - checkout
        - run: mkdir -p /tmp/workspace
        # Download and cache dependencies - dont change restore /save cache steps
        - restore_cache:
            keys:
              - v1-dependencies-{{ checksum "pom.xml" }}
              # fallback to using the latest cache if no exact match is found
              - v1-dependencies-
          # run + unit tests -> DSkipTests - no tests
        - run: mvn clean install -DskipTests
        - save_cache:
            paths:
              - ~/.m2
            key: v1-dependencies-{{ checksum "pom.xml" }}
          # define persist to workspace first, do attach_workspace: for other jobs
        - persist_to_workspace:
            root: /tmp/workspace
            paths: .

    docker-image-and-publish:
      machine: true
      steps:
        - attach_workspace:
            at: /tmp/workspace
        - run: ls -a /tmp/workspace
        - run:
            name: Create Docker image and push to ECR

            command: aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 821320994982.dkr.ecr.us-east-2.amazonaws.com && docker build -t ticketingapp /tmp/workspace && docker tag ticketingapp:latest 821320994982.dkr.ecr.us-east-2.amazonaws.com/ticketingapp:latest && docker push 821320994982.dkr.ecr.us-east-2.amazonaws.com/ticketingapp:latest
#            command: aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin 289073749577.dkr.ecr.eu-west-2.amazonaws.com && docker build -t ticketinapp /tmp/workspace && docker tag ticketinapp:latest 289073749577.dkr.ecr.eu-west-2.amazonaws.com/ticketinapp:latest && docker push 289073749577.dkr.ecr.eu-west-2.amazonaws.com/ticketinapp:latest

    #gets an image from ECR(repo) and puts on ec2
    deploy-job:
      docker:
        #specify the version you desire here
        - image: circleci/node:10.0.0
      steps:
        - run:
            name: Execute Deployment Script
            #can define the steps in a separate file -> .sh file in cd /home/ec2-user/bin/.. on ec2
            command: |
              ssh -o "StrictHostKeyChecking=no" ec2-user@ec2-3-137-137-107.us-east-2.compute.amazonaws.com <<'ENDSSH'
              /bin/deploy_image.sh
              docker ps
              ssh -o "StrictHostKeyChecking=no" ec2-user@ec2-18-118-111-127.us-east-2.compute.amazonaws.com <<'ENDSSH'
              

  workflows:
    version: 2
    build_and_test:
      #define the order here:
      jobs:
        - build
        - docker-image-and-publish:
            requires:
              - build
        - deploy-job:
            requires:
              - docker-image-and-publish




#notes:
#  create .sh in cd /home/ec2-user/bin/ and put the following in it:
#  #Check for running container & stop it before starting a new one
#  docker stop ticketinapp
#  docker rmi ticketinapp
#  docker rm ticketinapp
#  aws configure set aws_access_key_id AKIAUGTRDLZE4SXTSCXZ
#  aws configure set aws_secret_access_key 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
#  aws configure set default.region eu-west-2
#  aws ecr aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin 289073749577.dkr.ecr.eu-west-2.amazonaws.com
#  echo "Pulling latest Image name: 289073749577.dkr.ecr.eu-west-2.amazonaws.com/ticketinapp:latest"
#  docker pull 289073749577.dkr.ecr.eu-west-2.amazonaws.com/ticketinapp
#  echo "Starting sing Docker Image name: 289073749577.dkr.ecr.eu-west-2.amazonaws.com/ticketinapp:latest"
#  #docker run --rm -d ${DOCKER_OPTS} --name ticketinapp 289073749577.dkr.ecr.eu-west-2.amazonaws.com/ticketinapp:latest
#  docker run -d -p 8080:8080 --name ticketinapp 289073749577.dkr.ecr.eu-west-2.amazonaws.com/ticketinapp
#  echo "Cleaning old docker images"
#  #docker rmi $(docker images -f dangling=true -q)
#  if [[ $(docker images | grep ticketinapp | grep none | awk '{print $3}') ]]; then
#  docker rmi $(docker images | grep ticketinapp | grep none | awk '{print $3}')
#  else
#  echo "No old images found"
#  fi
#  docker ps -a
